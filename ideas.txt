    soft keyboard layout

        sources of error

            contribute to user error
                valid letters are next to each other (poor targets)
                    dove vs dive; I'm vs in
                adjacent (especially horizontal) bigrams detect as single letter
                    field vs fields
                    perhaps 's' should be next to a letter that rarely ends pluralized words

            system ambiguity
                optional internal characters on vector create ambiguity
                    or > our; rote > route; riot vs rot; pretty vs prey (on qwerty)
                vector passes over ambiguous internal characters
                    pit vs put vs pot v pout; more vs mote (on qwerty)

        ideas
            good letters should...
                be clustered in the center

            bigrams should...
                be two chars apart (one separating) on different rows
                be three chars apart (two separating) on horizontal rows

                not be adjacent

            trigrams should...
                change vectors on middle character
                    'the' is a common trigram
                    'th', and 'he' should not be found in the same direction
                    this is particularly true if 'te' is a common bigram

            gappy bigrams should...
                be adjacent if not also bigrams

            misc
                as distance increases the severity of the angle decreases
                magnitude becomes more significant than direction

        vector based identification
            starting point (a character) shouldn't matter
                "one" vs "I've" have similar vectors, but different starting points


-------


we are trying to reduce ambiguity
  words with ambiguous bigrams should have distinct vectors
    e.g., if 'te' and 'th' are both common 'h' and 'e' should have distinct vectors from 't'

  bigrams and gappy bigrams with the same first letter shouldn't have the same direction

  phrases should have similar vectors, even one major difference is acceptable

  space and modkeys should be big wide buttons on the sides
    characters keys should be as close as possible. a square makes more sense
    with swyping you don't commonly use space anyways

    right side

    left side



  vectors are a combination of direction and magnitude
    intuition says sense of direction is more precise

we are trying to promote speed

bracket pairing (code completion) for spanish punctuation Â¡ay caramba!


one hand dvorak

------

Swyping optimized layout

Auto-correct keeps getting better, but it is and always will be hobbled by a layout designed for a full-size physical keyboard. As much as I love my smartphone, even with auto-correct, I still can't reliably type without looking at my screen the way I could with my old slider feature phone. 

Before we can approach solutions to blind typing it pays to understand that Android typists fall into two general camps: tappers and swipers (iOS users are all tappers). Tappers hit each key in succession. This is the most intuitive typing system on a touchscreen as it closely resembles using a physical keyboard. Swipers (Swype, Swiftkey, Google keyboard) draw their finger across the letters of a word in a single gesture. 

Both of these systems suffer from a number of the same problems. Chief among them is that sometimes two words are distinguished by letters that are physically close together on the keyboard.




 to note that Android typists generally fall into two large camps - tappers and swipers. Tappers hit each key  

Fleksy does a great job for 

No auto-correct without a meaningful understanding of grammar can reasonably guess whether you are trying to write "pit", "put", or "pot"


------

**Background**

A good deal of work has gone into designing a keyboard layout for physical keyboards that is optimized for English. As early as the 1930s, it was clear that the tradeoffs made in designing the QWERTY keyboard had led to tremendous shortcomings in efficiency. The Dvorak keyboard was the product of this research. More recently we have seen the birth of the Colemak and Workman layout. The overarching theory behind these layouts is that the keys you type frequently should be the easiest to rearch. Effectually this means placing them on the keys a touch-typists fingers rest on. This is commonly called the home row.

It's instantly clear to anyone familiar with English that the homerow on alternate layouts includes more "good" letters than QWERTY. The quality of a keyboard is highly dependent on the choice of language by the user. In Polish, "w" represents [6.313% of all characters](http://en.wikipedia.org/wiki/Letter_frequency), contrast this with English, where "w" represents only 2.36% of characters. Likewise, it is entirely possible developers working in semicolon terminated language (C, Java, Javascipt, Perl, PHP) write ";" more often than "n".

While adoption has been meek, the users of alternate layouts often report higher levels of comfort and reduced fatigue. Anecdotally, when I have to type on a QWERTY keyboard, it feels frenetic.

Dvorak    64.9%
Colemak   69.5%

QWERTY    29.7%
AZERTY    25.2%


**Software Keyboards**

The very attributes that contribute to the efficiency of alternate layouts on a physical keyboard make it ill suited for a software keyboard. In my own experience typing on the Swype (QWERTY layout) software keyboard of my phone and tablet, many of my errors stem from the proximity of "u", "i", and "o". By putting *all* the vowels on the home row, the Dvorak layout results in even more ambiguous data entry. The high frequency of hand alternation that Dvorak boasts further means that typing is slowed as bigrams (adjacent letters) are intentionally split.

Clearly an entire different set of design considerations are required to create a layout optimized for a touchscreen. One of the biggest differences is the widespread use of autocorrect on mobile systems. 

Design considerations
  Help auto-correct identify words
  Promote speed by keeping the "good" letters relatively close together

Typing systems on touchscreens can be broadly broken into two catagories: tapping and swiping. In the former paradigm, users tap each key individually.  